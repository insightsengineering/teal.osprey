% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_ae_oview.R
\name{tm_g_ae_oview}
\alias{tm_g_ae_oview}
\title{Teal module for the \code{AE} overview}
\usage{
tm_g_ae_oview(
  label,
  dataname,
  arm_var,
  flag_var_anl,
  fontsize = c(5, 3, 7),
  plot_height = c(600L, 200L, 2000L),
  plot_width = NULL
)
}
\arguments{
\item{label}{(\code{character(1)})\cr
menu item label of the module in the teal app.}

\item{dataname}{(\code{character(1)})\cr
analysis data used in the teal module, needs to be
available in the list passed to the \code{data} argument of \code{\link[teal:init]{teal::init()}}.}

\item{arm_var}{(\code{choices_selected})\cr
object with all available choices and the pre-selected option for variable
names that can be used as \code{arm_var}. See \code{\link[teal.transform:choices_selected]{teal.transform::choices_selected()}} for
details. Column \code{arm_var} in the \code{dataname} has to be a factor.}

\item{flag_var_anl}{(\code{\link[teal.transform:choices_selected]{teal.transform::choices_selected}})
\code{choices_selected} object with variables used to count adverse event
sub-groups (e.g. Serious events, Related events, etc.)}

\item{fontsize}{(\code{numeric(1)} or \code{numeric(3)})\cr
Defines initial possible range of font-size. \code{fontsize} is set for
\code{\link[teal.widgets:optionalSliderInputValMinMax]{teal.widgets::optionalSliderInputValMinMax()}} which controls font-size in the output
plot.}

\item{plot_height}{(\code{numeric(3)})\cr
vector to indicate default value, minimum and maximum values.}

\item{plot_width}{(\code{numeric(3)})\cr
vector to indicate default value, minimum and maximum values.}
}
\value{
the \code{\link[teal:module]{teal::module()}} object.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Display the \code{AE} overview plot as a shiny module
}
\examples{
library(nestcolor)

ADSL <- osprey::rADSL
ADAE <- osprey::rADAE

# Add additional dummy causality flags.
add_event_flags <- function(dat) {
  dat <- dat \%>\%
    dplyr::mutate(
      TMPFL_SER = AESER == "Y",
      TMPFL_REL = AEREL == "Y",
      TMPFL_GR5 = AETOXGR == "5",
      AEREL1 = (AEREL == "Y" & ACTARM == "A: Drug X"),
      AEREL2 = (AEREL == "Y" & ACTARM == "B: Placebo")
    )
  labels <- c(
    "Serious AE", "Related AE", "Grade 5 AE",
    "AE related to A: Drug X", "AE related to B: Placebo"
  )
  cols <- c("TMPFL_SER", "TMPFL_REL", "TMPFL_GR5", "AEREL1", "AEREL2")
  for (i in seq_along(labels)) {
    attr(dat[[cols[i]]], "label") <- labels[i]
  }
  dat
}
ADAE <- ADAE \%>\% add_event_flags()

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL, code = "ADSL <- osprey::rADSL"),
    cdisc_dataset("ADAE", ADAE,
      code =
        "ADAE <- osprey::rADAE
           add_event_flags <- function(dat) {
             dat <- dat \%>\%
               dplyr::mutate(
                 TMPFL_SER = AESER == 'Y',
                 TMPFL_REL = AEREL == 'Y',
                 TMPFL_GR5 = AETOXGR == '5',
                 AEREL1 = (AEREL == 'Y' & ACTARM == 'A: Drug X'),
                 AEREL2 = (AEREL == 'Y' & ACTARM == 'B: Placebo')
               )
             labels <- c(
               'Serious AE',
               'Related AE',
               'Grade 5 AE',
               'AE related to A: Drug X',
               'AE related to B: Placebo'
             )
             cols <- c('TMPFL_SER', 'TMPFL_REL', 'TMPFL_GR5', 'AEREL1', 'AEREL2')
             for (i in seq_along(labels)) {
              attr(dat[[cols[i]]], 'label') <- labels[i]
             }
             dat
           }
           # Generating user-defined event flags.
           ADAE <- ADAE \%>\% add_event_flags()"
    ),
    check = TRUE
  ),
  modules = modules(
    tm_g_ae_oview(
      label = "AE Overview",
      dataname = "ADAE",
      arm_var = teal.transform::choices_selected(
        selected = "ACTARM",
        choices = c("ACTARM", "ACTARMCD")
      ),
      flag_var_anl = teal.transform::choices_selected(
        selected = "AEREL1",
        choices = teal.transform::variable_choices(
          ADAE,
          c("TMPFL_SER", "TMPFL_REL", "TMPFL_GR5", "AEREL1", "AEREL2")
        ),
      ),
      plot_height = c(600, 200, 2000)
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}
}
