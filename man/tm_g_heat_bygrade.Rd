% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_heat_bygrade.R
\name{tm_g_heat_bygrade}
\alias{tm_g_heat_bygrade}
\title{Teal module for the heatmap by grade}
\usage{
tm_g_heat_bygrade(
  label,
  sl_dataname,
  ex_dataname,
  ae_dataname,
  cm_dataname = NA,
  id_var,
  visit_var,
  ongo_var,
  anno_var,
  heat_var,
  conmed_var = NULL,
  fontsize = c(5, 3, 7),
  plot_height = c(600L, 200L, 2000L),
  plot_width = NULL
)
}
\arguments{
\item{label}{(\code{character(1)})\cr
menu item label of the module in the teal app.}

\item{sl_dataname}{(\code{character}) subject level dataset name,
needs to be available in the list passed to the \code{data}
argument of \code{\link[teal]{init}}}

\item{ex_dataname}{(\code{character}) exposures dataset name,
needs to be available in the list passed to the \code{data}
argument of \code{\link[teal]{init}} \cr}

\item{ae_dataname}{(\code{character}) adverse events dataset name,
needs to be available in the list passed to the \code{data}
argument of \code{\link[teal]{init}} \cr}

\item{cm_dataname}{(\code{character}) concomitant medications dataset name,
needs to be available in the list passed to the \code{data}
argument of \code{\link[teal]{init}} \cr
specify to \code{NA} if no concomitant medications data is available}

\item{id_var}{(\code{choices_seleced}) unique subject ID variable}

\item{visit_var}{(\code{choices_seleced}) analysis visit variable}

\item{ongo_var}{(\code{choices_seleced}) study ongoing status variable,
This variable is a derived logical variable. Usually it can be derived from \code{EOSSTT}.}

\item{anno_var}{(\code{choices_seleced}) annotation variable}

\item{heat_var}{(\code{choices_seleced}) heatmap variable}

\item{conmed_var}{(\code{choices_seleced}) concomitant medications variable,
specify to \code{NA} if no concomitant medications data is available}

\item{fontsize}{(\code{numeric(1)} or \code{numeric(3)})\cr
Defines initial possible range of font-size. \code{fontsize} is set for
\code{\link[teal.widgets:optionalSliderInputValMinMax]{teal.widgets::optionalSliderInputValMinMax()}} which controls font-size in the output
plot.}

\item{plot_height}{(\code{numeric(3)})\cr
vector to indicate default value, minimum and maximum values.}

\item{plot_width}{(\code{numeric(3)})\cr
vector to indicate default value, minimum and maximum values.}
}
\value{
the \code{\link[teal:teal_modules]{teal::module()}} object.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Display the heatmap by grade as a shiny module
}
\examples{
data <- cdisc_data() |>
  within({
    library(dplyr)
    library(nestcolor)
    ADSL <- rADSL \%>\% slice(1:30)
    ADEX <- rADEX \%>\% filter(USUBJID \%in\% ADSL$USUBJID)
    ADAE <- rADAE \%>\% filter(USUBJID \%in\% ADSL$USUBJID)
    ADCM <- rADCM \%>\% filter(USUBJID \%in\% ADSL$USUBJID)
    # This preprocess is only to force legacy standard on ADCM
    ADCM <- ADCM \%>\%
      select(-starts_with("ATC")) \%>\%
      unique()
    # function to derive AVISIT from ADEX
    add_visit <- function(data_need_visit) {
      visit_dates <- ADEX \%>\%
        filter(PARAMCD == "DOSE") \%>\%
        distinct(USUBJID, AVISIT, ASTDTM) \%>\%
        group_by(USUBJID) \%>\%
        arrange(ASTDTM) \%>\%
        mutate(next_vis = lead(ASTDTM), is_last = ifelse(is.na(next_vis), TRUE, FALSE)) \%>\%
        rename(this_vis = ASTDTM)
      data_visit <- data_need_visit \%>\%
        select(USUBJID, ASTDTM) \%>\%
        left_join(visit_dates, by = "USUBJID") \%>\%
        filter(ASTDTM > this_vis & (ASTDTM < next_vis | is_last == TRUE)) \%>\%
        left_join(data_need_visit) \%>\%
        distinct()
      return(data_visit)
    }
    # derive AVISIT for ADAE and ADCM
    ADAE <- add_visit(ADAE)
    ADCM <- add_visit(ADCM)
    # derive ongoing status variable for ADEX
    ADEX <- ADEX \%>\%
      filter(PARCAT1 == "INDIVIDUAL") \%>\%
      mutate(ongo_status = (EOSSTT == "ONGOING"))
  })

datanames(data) <- c("ADSL", "ADEX", "ADAE", "ADCM")
join_keys(data) <- default_cdisc_join_keys[datanames(data)]

ADCM <- data[["ADCM"]]

app <- init(
  data = data,
  modules = modules(
    tm_g_heat_bygrade(
      label = "Heatmap by grade",
      sl_dataname = "ADSL",
      ex_dataname = "ADEX",
      ae_dataname = "ADAE",
      cm_dataname = "ADCM",
      id_var = choices_selected(
        selected = "USUBJID",
        choices = c("USUBJID", "SUBJID")
      ),
      visit_var = choices_selected(
        selected = "AVISIT",
        choices = c("AVISIT")
      ),
      ongo_var = choices_selected(
        selected = "ongo_status",
        choices = c("ongo_status")
      ),
      anno_var = choices_selected(
        selected = c("SEX", "COUNTRY"),
        choices = c("SEX", "COUNTRY", "USUBJID")
      ),
      heat_var = choices_selected(
        selected = "AETOXGR",
        choices = c("AETOXGR")
      ),
      conmed_var = choices_selected(
        selected = "CMDECOD",
        choices = c("CMDECOD")
      ),
      plot_height = c(600, 200, 2000)
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
